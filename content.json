{"pages":[{"title":"About","text":"Hello~ 私は 樱花雨 です。 兴趣爱好喜欢把工作和生活分开，为它们分别安排时间。 中学时期经常踢足球和在郊外游泳，在亚热带季风气候的地区有过一个季度的冬泳经历。不过现在更喜欢泡温泉。 最近在看超电磁炮3，时不时会看看党妹发的视频，时不时打打明日方舟。 2020年4月 于中国广东 - - - - 以下为2020年6月19日更新 - - - - 打从2020年2月，我已经很少打明日方舟了。现在超电磁炮3也已经全部看完了。持续关注党妹，现在又多关注了一位 up @TheRock_Johnson 。 - - - - 以下为2021年12月10日更新 - - - - 现居中国武汉，明年秋招。","link":"/about/index.html"},{"title":"Friends","text":"青锋工作室 梦里曾执青锋剑，不须言，正少年~主要是光年在这里写博客 认识光年，是在大一的时候。光年是附中人，如果来自同一个城市的人被称为同乡，那么我们还是同乡的说。 初等记忆体 自称是个美术生，温柔可爱会做饭写诗de艾雨寒，名句是初学不看 wiki 安装的人迟早是要还的（x 机电学院的学长，据光年说学长是做CPU的。不过我猜测学长可能是做操作系统的。 HeavyLaw Let life be beautiful like summer flowers And Death like autumn leaves. 计算机视觉方向的探索者，数理功底扎实 lxy417165709 认真学习叭 悦是一个热爱生活的人，定期旅行，喜欢摄影。闲谈中曾记得他讲过，如果可以的话希望回老家开个小店做生意，老家的经济发展越来越好了。 团子的天空幻想 但愿日子清净，抬头遇见的都是柔情 生于忧患，团子很早就确定要走前端方向了。带着明确的目标，他渐渐积累前端知识。目前在字节跳动上班。据我观察，他的快乐很简单，平时会打打斗地主，也会打一些陈年小游戏以追忆童年时光。 JessChen 漫漫旅途，总是需要些寄托 Jmlong23 隔壁班的学习委员 闫少航 生活，没有模板，只需心灯一盏，烦时，找快乐，别丢了幸福； 忙时，偷偷闲，别丢了健康；累时，停停手，别丢了快乐。只要心中有家，人生就不会迷路。","link":"/links/index.html"}],"posts":[{"title":"Hello Hexo","text":"换博客了今天把 Wordpress 换成 Hexo 了！","link":"/2021/05/25/Hello-Hexo/"},{"title":"ES6箭头函数の小陷阱","text":"ES6箭头函数语法糖真好吃，不过也有一些小陷阱噢~ 噜啦啦噜啦啦噜啦噜啦咧~我萌一起来看看箭头函数の两种陷阱叭！！ 箭头函数和对象字面量箭头函数提供了更简短的语法，可以将函数编写为具有隐式返回值的 lambda 表达式。比如使用一个函数映射一些数组。使用常规函数可能会多出很多空行。 例如： 1234const numbers = [1, 2, 3, 4];numbers.map(function(n) {return n * n;}); 用 lambda 样式的箭头函数来写的话，就会写成两行优雅、易读的代码： 12const numbers = [1, 2, 3, 4];numbers.map(n =&gt; n * n); 在这种用例中，箭头函数的表现符合预期，它将值本身相乘并返回到包含 [1, 4, 9, 16] 的新数组。 但如果你尝试映射到对象，那么结果可能和你想象的不一样了。例如，假设我们试图将数字映射到包含如下值的对象数组中： 12const numbers = [1, 2, 3, 4];numbers.map(n =&gt; { value: n }); 这里的结果实际上是一个包含未定义值的数组。虽然看起来在这里返回一个对象，但是解释器看到的东西完全不一样。花括号被解释为箭头函数的块作用域，而值语句最后实际上成为了标签。在解释器眼里，它看起来是这样的： 123456const numbers = [1, 2, 3, 4];numbers.map(function (n) { value: n return;}); 解决方法在这里。只需要将对象包装在括号中，就可以将它变成一个表达式而不是一个块语句，如下所示： 12const numbers = [1, 2, 3, 4];numbers.map(n =&gt; ({ value: n })); 这会计算出一个包含对象数组的数组，该对象数组具有预期的值。 箭头函数和绑定箭头函数没有自己的 this 绑定，即它们的 this 值和封闭词法作用域的 this 值是一样的。 箭头函数的this 绑定很可能与你原本所想的不一样。例如： 12345678let calculator = { value: 0, add: (values) =&gt; { this.value = values.reduce((a, v) =&gt; a + v, this.value); },};calculator.add([1, 2, 3]);console.log(calculator.value); // 0 我们希望这里的 this 绑定为此处的 calculator 对象，但实际上 this 绑定最后要么是未定义，要么是全局对象，具体取决于代码是否在严格模式下运行。这是因为这里最接近的词汇作用域是全局作用域。在严格模式下这是未定义的。（否则，它会是浏览器的窗口对象（或 Node.js 兼容环境中的过程对象。 常规函数具有 this 绑定。在对象上调用时，this 将指向该对象，因此常规函数依然是获得成员函数的正确途径: 12345678let calculator = { value: 0, add(values) { this.value = values.reduce((a, v) =&gt; a + v, this.value); },};calculator.add([1, 2, 3]); console.log(calculator.value); // 6 另外，由于箭头函数没有 this 绑定，因此无法使用Function.prototype.call、Function.prototype.bind 和 Function.prototype.apply。声明箭头函数后，this 绑定设置为固定，无法更改。 因此，下面的示例将遇到与之前类似的问题：当调用 adder 的 add 函数时，this 绑定又成了全局对象，尽管我们尝试使用 Function.prototype.call 覆盖它： 123456789const adder = { add: (values) =&gt; { this.value = values.reduce((a, v) =&gt; a + v, this.value); },};let calculator = { value: 0};adder.add.call(calculator, [1, 2, 3]); // undefined 什么时候IDE才能学会自己写代码 :) 参考链接： Lesser-Known JavaScript Hazards ECMAScript® 2018 Language Specification","link":"/2019/11/05/es6%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E3%81%AE%E5%B0%8F%E9%99%B7%E9%98%B1/"},{"title":"C++11 featureの右值引用","text":"C++11的feature应该不能算new feature了叭，毕竟这个版本已经年代久远了。来，我们学习一下C++11的右值引用。 什么是左值，什么是右值？lvalue这个词来自于C语言，指的是可以放在赋值表达式左边的事物——在栈上或堆上分配的命名对象，或者其他对象成员——有明确的内存地址。 rvalue这个词也来源于C语言，指的是可以出现在赋值表达式右侧的对象——例如，文字常量和临时变量。 左值引用首先我们回顾一下年代更为久远的左值引用。 1234int var=42;int&amp; ref=var; // 创建一个var的引用ref=99;assert(var==99); // 原型的值被改变了，因为引用被赋值了 左值引用只能被绑定在左值上，而不是右值。 因此左值引用不能这样子写： 1int&amp; i=42; // 编译失败 不过我们可以钻空子。像这样： 1int const&amp; i = 42; 右值引用C++11标准介绍了_右值引用_(rvalue reference)，这种方式只能绑定右值，不能绑定左值，其通过两个&amp;&amp;来进行声明： 1int&amp;&amp; i=42; // 正确 不能绑定左值噢： 12int j=42;int&amp;&amp; k=j; // 编译失败 右值引用用途の移动语义 右值通常都是临时的，所以可以随意修改；如果知道函数的某个参数是一个右值，就可以将其看作为一个临时存储或“窃取”内容，也不影响程序的正确性。这就意味着，比起拷贝右值参数的内容，不如移动其内容。动态数组比较大的时候，这样能节省很多内存分配，提供更多的优化空间。 精简版：在传参的时候使用右值引用可以避免在内存中创建重复的变量副本，空间复杂度更低。 举个例子叭，比如老的这种写法就很耗内存： 12345void process_copy(std::vector&lt;int&gt; const&amp; vec_){ std::vector&lt;int&gt; vec(vec_); vec.push_back(42);} 在以上代码中，一个函数以std::vector&lt;int&gt;作为一个参数，就需要将其拷贝进来，而不对原始的数据做任何操作。 如果使用右值引用版本的函数来重载这个函数，就能避免在传入右值的时候，函数会进行内部拷贝的过程： 1234void process_copy(std::vector&lt;int&gt; &amp;&amp; vec){ vec.push_back(42);} 右值引用用途の 函数模板如果函数模板参数以右值引用作为一个模板参数，当对应位置提供左值的时候，模板会自动将其类型认定为左值引用；当提供右值的时候，会当做普通数据使用。 我帮你整理一下思路： 12345678if(函数模板参数以右值引用作为一个模板参数){ if(对应位置提供左值){ 模板会自动将其类型认定为左值引用 } if(对应位置提供右值){ 会当做普通数据使用 }} 举个栗子，定义一个函数模板： 123template&lt;typename T&gt;void foo(T&amp;&amp; t){} 随后传入一个右值，T的类型将被推导为： 123foo(42); // foo&lt;int&gt;(42)foo(3.14159); // foo&lt;double&gt;&lt;3.14159&gt;foo(std::string()); // foo&lt;std::string&gt;(std::string()) 不过，向foo传入左值的时候，T会被推导为一个左值引用： 12int i = 42;foo(i); // foo&lt;int&amp;&gt;(i) 因为函数参数声明为T&amp;&amp;，所以就是引用的引用，可以视为是原始的引用类型。那么foo()就相当于： 1foo&lt;int&amp;&gt;(); // void foo&lt;int&amp;&gt;(int&amp; t); 这就允许一个函数模板既可以即接受左值，又可以接受右值参数。 小结我萌先回顾了左值、右值的术语概念和左值引用的语法，然后介绍了右值引用的语法，最后讲了右值引用的两种用途：移动语义和函数模板。 加油啦，你最棒！","link":"/2019/11/06/c11-feature%E3%81%AE%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/"},{"title":"《Expelled from Paradise》观后感","text":"因为光年推荐，我看了Expelled from Paradise这部电影。 不得不说，艺术源于生活又高于生活。女主的容貌、身材实在是太好了叭——可以想象艺术家设计女主身材的时候有多猥琐用心。萌萌的，即便是她倔强的一面，也很可爱。 男主的人品有点坏，不过坏得恰到好处，他耍无赖的时候情节略带戏剧性。在女主有需要的时候，会适时提供帮助。 光年之所以推荐这部电影，是因为我们之前聊到人工智能与人类是否能共存这个话题，而这部电影的乐园里的人格、弗隆提亞·賽格 (フロンティアセッター)是典型的人工智能形象。 弗隆提亞·賽格 是自我更新到有“我”的意识的人工智能新生事物，致力于独自完成发射火箭送人类探索太空的任务。乐园里的人格（比如女主）是二进制数据，表面上无痛无痒幸福快乐。 剧情伊始，人工智能新时代，数据人格比肉体人类先进多了，真是实名羡慕。剧情以 [ 乐园服务器被入侵，女主去调查 ] 展开。不过越往后看，会发现主编另有话说。 电影的主题应该是人生而自由。 在乐园里，地位越高的人格会得到越多的计算资源。计算资源越多，人格的行动力越强，本领越大。女主对工作认真负责，多年的付出从来不负女主所望，她现已身至三等官。 人的欲望是无限的人民对美好生活的需要是日益增长的，二进制人格也难以幸免。为了获得更多的计算资源，女主努力工作，盼望有朝一日升到一等官。 男主是一个凡夫俗子，对物质的看法比较现实。他多次帮助乐园（有酬）解决困难，并因为表现出色而多次收到乐园的邀请，请他加入乐园，成为二进制人格的一分子。 男主从来都不接受乐园的邀请。女主不解——乐园物质极大丰富日子可以过得很潇洒，为何男主不肯加入？ 追求高质量生活的女主，并没有发现利益关系早已纠缠了她。举个例子：为了在同行中抢功劳，她趁早出发调查黑客身份。而打算抢功劳的人格又岂止女主一个？ 男主的生活就比较随性了，在芜芜杂世中，他保留着对音乐的爱好，夜间开车累了就主张睡觉（这种表现是日出而作日落而息的一个缩影）。乐园里有阳光照射不到的地方，人际社会一样有。但是男主历尽千帆，仍是少年。 我并没有贬低奋斗者的意思。我建议一个人去追求自己内心想要的生活，而不要被束缚于追求社会风气所推崇的生活。而且，在追求自己内心想要的生活的过程中，难免会受到不必要的干扰，这时要认清自己内心的想法。 在影片最后，女主重新（之所以说是重新，是因为她曾是人类）回到人间生活。逃离乐园到人间生活，依然有可能被人间的利益关系所纠缠。不过当一个人已经被利益纠缠得狼狈不堪，那么请尽快用全力摆脱现状，重新开始生活，而女主也确实做到了这一点。 弗隆提亞·賽格的思想得到进一步解放，决定自行探索太空。 相关文章：自由是人最宝贵的权利——由电影《无问西东》想到的","link":"/2019/05/11/%E3%80%8Aexpelled-from-paradise%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/"},{"title":"专业修电脑辅修开发","text":"今天早上上了数据库实验课，因为我已经在做后面的实验了，所以没什么体验感。今天下午是密码学 Tutorial，学长讲题的思路大体上和我当时做的是一样的。但是他讲得有点简略呀，而且有些中间过程的正确性不敢恭维。今天修了一整天实验室电脑，win 环境大概是配好了。逛了逛 Arch Linux 文档，发现现在用 archinstall 可以很无脑地安装系统，但是个人不建议选 Nvidia 驱动，因为可能会开不了机。另外貌似闲置的电脑还很多。要不要再占一台电脑装个 Arch Linux 呢（笑QQ 群太多了，而且都是通知群，看消息很容易看漏。很烦这件事情。但目前还没有好的办法呢（摊手 我还遇到了一些其他问题，并制定如下对策：作业和要去做的事情也容易记漏。对策：需要好好利用日历工具。久坐在实验室腿部缺乏运动。晚上室友集体回宿舍，洗澡时间扎堆。对策：傍晚运动吃饭和洗澡，然后回实验室可以晚一点。","link":"/2021/11/18/%E4%B8%93%E4%B8%9A%E4%BF%AE%E7%94%B5%E8%84%91%E8%BE%85%E4%BF%AE%E5%BC%80%E5%8F%91/"},{"title":"友情至上","text":"能记下来的心情就记下吧，不然以后会忘掉的。 记得大一的时候，企鹅还在岛上。有一次我们在南亭吃烤鱼，我表示这样子和朋友吃烤鱼很有气氛，热腾腾的水雾往上冒，即使在寒冷的冬天，也使人感到温暖。 席间，我们聊到我们对友情的态度。至今我仍清晰地记得，这次吃饭，是我对关于朋友的价值观发生重大改变的转折点。 从小我就是一个理性的人，并确立过某些价值观。当时认为读书时候的朋友是临时的，过了一个阶段认识新的人，就会和以前的同学少联系了。事实证明，至今和我仍有联系的老同学为数不多。我觉得这有两方面因素，一是现在不联系的同学本来以前交往就不深，二是我没有刻意去挽留（对方也是。 学计算机网络的时候了解到分层设计的思想，下层向上层服务，下层屏蔽细节。私以为，人也应该这样吧，把自己艰辛的一面放在下层，向上提供屏蔽细节的服务。 以上内容编辑于2019年11月29日，当时不知什么原因没有继续写下去。今天是2020年4月10日，翻开这篇草稿，发现以前写下的内容已经不完全符合现在的价值观了。但是我不打算删改它，至少它代表了我某个时期的心情。 我猜当时的我要表达的是经历了岁月的洗礼仍能存留到现在的友情很重要，且行且珍惜。 随着认识的人越来越多，会发现大家的价值观很不一样，牛人的牛法不尽相同，因此不应在人际交往中苛刻求同。只要是积极向上的价值观就都是好的。","link":"/2020/04/10/%E5%8F%8B%E6%83%85%E8%87%B3%E4%B8%8A/"},{"title":"己亥#12 | 乌拉~日漫好好看哦","text":"今天久违地打了篮球。已经记不清上次打球是什么时候了。最近希望去游泳。上次游泳的时间是2019年8月13日，距今已有一个多月。我对游泳的向往是其他体育活动无法替代的，因为游泳使我感到安逸。 本周看了《热诚传说 X》《热诚传说第二季》，旷了很多课但是并没有把时间用来学习，而是看了一部讲述清朝康熙宫廷的古装电视剧。目前在追《某科学的一方通行》。 看日漫的过程中，可以感受到，日漫表达的主题大都是追求世界和平、人们和谐相处。在日漫的正面派人物中，少有猜疑、谋略和权术。而中国封建古装剧有所不同，凡事讲求智取，成事前需要总体谋划，顾全大局。 在一战、二战之时，日本是一个军国主义的君主立宪制国家，当时日本民众皆臣民，应当服从假借天王之名的一切号召。那为何发展至今，日本的动漫却表达出对美好纯净的世界的向往和对战争的厌恶呢？ 自1889年起，日本是一个君主立宪制的国家，当时的宪法为《大日本帝国宪法》，又称明治宪法。第二次世界大战后，新制定的日本国宪法规定，天皇是国民团结的象征，对政府不具有干涉力。 根据日本国宪法第九条，日本永远放弃战争的和平主义原则奉为神圣不可侵犯的权利，但同时为了灵活参与国际事务“威胁或使用武力作为解决国际争端的手段”写进宪法。 同盟国军事占领下现行宪法，1946年11月3日公布修改了大日本帝国宪法，1947年5月3日施行以来，日本国内一直存在修改宪法的议论。不少保守派政治家主张，因为现行宪法是美国草拟的，没有正统性。但长期以来，日本社会大多不重视宪法修改问题。 来源：维基百科-日本政治 二战后，日本战败，同盟军驻日。期间日本修改过宪法。自新宪法颁布以来，人们的人权大大提高，日军在宪法中的地位大大降低。久而久之，日军江河日下。 那么改宪对各方有何好处呢？首先，通过制定法律来降低日军在本国的地位，日军对同盟国的威胁降低。其次，日本人得到了更大程度的自由，更多地考虑如何过好日子而不是如何上阵杀敌。最后，对日军没有好处只有坏处。 日漫描绘理想化的环境，体现了人们对和平世界美好生活的向往。但是现实非理想，一味保持单纯清净的心，难以应付多变的世界。世事变坏莫测，掌握谋略权术是必须的。正是出于生存的需要， 才有了前人对谋略的总结，才有了《鬼谷子》《战国策》《孙子兵法》等。谋事在人，世界的美好发展有赖于人们的共同努力；生而为人，当为造福全人类而读书。","link":"/2019/09/27/%E5%B7%B1%E4%BA%A512-%E4%B9%8C%E6%8B%89%E6%97%A5%E6%BC%AB%E5%A5%BD%E5%A5%BD%E7%9C%8B%E5%93%A6/"},{"title":"己亥#13 | 向恶势力低头","text":"开学的时候本以为自己有充足的时间考一下证，于是当时一冲动就报了BEC-H。记得国庆回家的时候，我带了BEC-H的书和数据结构的书回家，本来打算在家主要看BEC的，但结果BEC实在太难了，在家一直看数据结构。 这个学期要修的学分还是比较多，能自由安排的时间有限。之前曾探索过光年的时间安排方式，即以日历安排行程，不过现在已经弃坑了。本人还是比较喜欢随性的生活。 2019.11.16，这一天早上我去中大东校区考了BEC-H的阅读、写作、听力。阅读做了前面两大题就想离场放弃了。不过看到旁边的人都在认真做，我才坚持了下来。就感觉写作好写一点。听力听着听着手就微微颤抖。向恶势力低头。 早上考完听读写的我已经是没有灵魂的我了。回我校睡了一觉。按照准考证的时间，晚上18：45~19：00是口语考试时间。我在睡觉期间辗转反侧悲愤难眠，最终决定放弃口语部分的考试。 晚上没有去考试，取而代之的是，我去了GOGO和kx喝奶茶聊天。主要是聊天。从中我了解到广外的外语氛围真的比我校好很多。她舍友今天也考BEC，这位在我看来很神奇的她的舍友此前已经考过托福/雅思了的。 广外真是一个神奇的地方。在这个地方，外语大佬真多。","link":"/2019/11/17/%E5%B7%B1%E4%BA%A513-%E5%90%91%E6%81%B6%E5%8A%BF%E5%8A%9B%E4%BD%8E%E5%A4%B4/"},{"title":"去一下实验室吧","text":"自从昨天去了实验室看同学，才发现改造后的实验室已经比较舒适了。本科的时候因为宿舍氛围不利于工作，一直无法在宿舍开展工作，在宿舍开展工作是我的理想。现在的宿舍条件比之前好多了，作息规律而且安静，于是前段时间有点报复性地一直住在宿舍。之前为了打造宿舍的工作环境还特意买了一张桌子和一个台式机，但今天发现实验室配备的电脑配置已经好于我现有的两台电脑了。综合考虑，之后打算在实验室工作。 今天在实验室把编程的环境都配好了，可是还有点小问题需要 bios 密码才能解决。好吧明天去 8 楼找一下管电脑的学生干部。 今天的密码学内容我没能理解。回头再补吧。","link":"/2021/11/17/%E5%8E%BB%E4%B8%80%E4%B8%8B%E5%AE%9E%E9%AA%8C%E5%AE%A4%E5%90%A7/"},{"title":"庚子#3 | 寒假终了","text":"按常理来说，今天是开学的第一天，但我星期三才有课。所以今天姑且也算是我的寒假。 这个寒假原本打算会独居很久的。为了应对新冠疫情，我在除夕前夕和家人团聚，并且至今也没有独居。 过年期间打了几天麻将。 翡翠台的《黄金有罪》《大酱园》《独孤皇后》成为了茶余饭后的消遣。其中《独孤皇后》 现在还没大结局 。在初一的时候看了《重啟咲良田》，《超炮T》一直有跟进，白井黑子牛逼！很喜欢up主机智的党妹的说话风格。 疫情期间虽然有新电影免费放在了网上，但是我没有去看，倒是花钱重温了《速度与激情8》。一直很喜欢速度与激情这个系列的电影，并非纯粹因为其中的街头情节和人物放荡不羁的个性，更因为他们无论遭遇何种困难始终把家庭放在很很重要的位置。 把学习强国刷到了4700分，最近开始着手经典诵读。 因为个人原因，我退出了一个十多人的里面全是放假就会聚到一起玩的初中同学的微信群。因为我希望今年的社交活动少一点。为了降低自己发说说和发朋友圈的欲望，把QQ空间设成了私密，把朋友圈设成了三天可见。里面没什么隐私，仅仅为了降低自己发说说和发朋友圈的欲望而已。 kx的社恐比我想象中的严重。 和wuli成了研友，互相打卡日常工作。 最近每天下午四点都会条件反射地觅食,主要是鸡蛋炒饭，衣带渐紧终不悔。 不爱听音乐的程序员不是好吃货。 《苏丽珂》The Red Army Choir","link":"/2020/03/09/%E5%BA%9A%E5%AD%903-%E5%AF%92%E5%81%87%E7%BB%88%E4%BA%86/"},{"title":"庚子#4 | 迎来课多的第一天","text":"闹钟打破清静的早晨，慵懒的少年从被窝中坐起，缓缓下床，开始了他繁忙的一天。 今天的第一件事情莫过于抢阿里云半年免费的云服务器。用云服务器做完作业就扔是一个再好不过的选择。然鹅我因操作的时候犹豫了一下选哪个Linux发行版而错失良机。明日手速快起来，Arch Linux预定！ 今天总共上了组网、Linux、Linux实验和法语课。上完Linux实验的时候不想继续上课差点把法语课给退了。不过考虑到还有七天的退课时间，还是先上上课再考虑。不过本次法语课体验不错，所以我得上完下周的课再考虑退不退，大概率不退吧。 法语比俄语明显简单好多，跟日语相比的话我比较不出来。 前天做完了2017英语一的卷子还没来得及整理相关笔记，今天又获得了新的课程作业。布置作业是不对的，委屈。 今天的吃饭时间受到了课程影响，不过久违地吃到了排骨和瘦肉，粗略算了一下价格感觉亏大了，近期不宜猪肉宜鸡鸭。 每周只有星期四课多其实还好啦。明天写作业，刻海星~ 《Tu me manques》Sheryfa Luna","link":"/2020/03/12/%E5%BA%9A%E5%AD%904-%E8%BF%8E%E6%9D%A5%E8%AF%BE%E5%A4%9A%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/"},{"title":"庚子#5 | 课务繁忙","text":"组网 组网也布置上机作业了，要好好听课了。 Linux 在上个星期上完Linux课不久后，我着手开始实验，并把实验报告写完了。可是本周上课的时候，张老师对作业提出了更高的要求。补充作业将是耗时耗力的事情。 法语退课 昨天晚上上了法语课的前半节，冯老师讲课条理清晰。但是随着知识难度的增加，我预料到法语课的知识需要在课后花一定的时间消化。于是在课间休息的时候，我通过企业联系冯老师，恳请退课事宜。 老师对此表示理解。于是我去教务系统把课退了。 小结 现在是2020年3月20日。自由的时间总是越多越好。","link":"/2020/03/20/%E5%BA%9A%E5%AD%905-%E8%AF%BE%E5%8A%A1%E7%B9%81%E5%BF%99/"},{"title":"庚子#6 | Living Alone","text":"2020年的夏季，一如既往的热。与过往不同的是，今年的这个时候中国南部的大学生仍未回校。 今天开始独居，如无意外，将会独居到开学。 开学时间现在还未确定。如果这学期不用上学，那就独居到下学期开学。 有人说：一个安静的环境有利于高效工作。我赞成这种说法。 其实早些时候，我就计划独居了。碍于新冠疫情扩散，我的独居计划一直没有得以落实。 记得在上学期末的时候，大家考完试熙熙攘攘地回家了。当时我在筹划把主要工作地点从学校转移到家里，因此我带了几乎所有的衣服、几乎所有有用的书回家。 随着新冠疫情在国内得到进一步的控制，是时候开始独居了。形只影单，一丝孤独，一缕闲愁。 这时候不禁想起了高中数学老师写在泛黄的明信片上的话：耐得住寂寞，才守得住繁华。 —————— 我是美丽的分割线 —————— 刚吃完晚饭，来做一些补充。 清点了物资：现储备有9只鸡蛋，两块姜，两根青瓜，两罐龟零膏，一袋叉烧包，三个面饼，一小袋米。 今晚吃了鸡中翼炒青瓜 虽然吃起来很好吃，但是看起来很一般。看来要多逛逛小破站学习厨艺。（做菜已经很耗时间了，好不好看就算了吧。","link":"/2020/05/05/%E5%BA%9A%E5%AD%906-living-alone/"},{"title":"庚子#7 | 旧友重逢","text":"独居了一个月，一个人的生活令人心情平静。唯独不好的是春夏交替的季节雨水甚多，电闪雷鸣时独自遥望窗外，雨淅淅沥沥打在绿植上，户外的人匆匆走着，直到后来再也看不到一个人，空留下空旷的道路旁的绿植和雨声，令人倍感孤独。 在昨天我很幸运地和老朋友相见。见到小宇时大概是早上9点，我们闲聊了一会，聊及高中和大学的细碎事情和共同认识的同学。 认识小宇，是在高一上学期的时候。当时去往同一所高中的初中同学不多，在一个新的学校里，我认识的人只有几个。当我发现小宇来自同一个镇的时候，我们很快有了共鸣。在高中的时候，我们经常三三两两去城市广场附近玩，过节留在学校的话偶尔会来往一下。高中毕业后，大一的时候因为我们都在小谷围岛，所以每学期都有相见，但后来小宇去了五山校区，我们就没有见过了。 早晨的空气清新开朗，我们逛了一下江滨公园。江滨公园是一个建在北江河畔的公园，站在江边的过道上，隔着栏杆低头是涛涛江水，隔江而望是对岸林立的高楼。我和小宇边走边聊，提及未来的去向，小宇确定要保研了，我仍不能预知未来何去何从。作为数学成绩不错的学生，小宇并不认为自己有数学天赋，而归因于自己做的数学练习题比较多。 在江滨公园逛完之后，我们移步到了赢之城，找了一个奶茶店落脚，我们似乎有聊不完的话题。之后随意逛了一下。事实证明我们两个都是没有逛街热情的人，在超市内走马观花看完了一系列商品最后没有要买的，在花店看绿植但是也不太感兴趣。 随意闲逛使我们偶遇了邓邓邓和他女朋友，邓邓邓说便便和她男朋友也在附近，打算下午唱歌，问我们要不要一起。唱歌当然好啊，虽然要so much money，但是还是可以玩得很开心的。然而后来由于便便的男朋友太害羞不想见太多陌生人，我们就没有加入到他们的唱歌队伍之中。 下午下雨，我和小宇用手机投屏到电视，看了一些节目。小宇看过很多动漫，总是和我聊这些，我仅有的动漫储备量有时会接不住这些话题。我们刚开始打算看《天气之子》，小宇说看过这部动漫觉得不错，我没看过的话（其实后来我想起来我看过），想和我再看一遍。后来因为投屏技术不够，我们改看了《学习12小时+Dota 12小时》《清华生的一天 》。小宇说up主学过的课程他也学过，不过up主的课程作业和期末考试难度更大，所以看视频的时候比较有共鸣。不过他们学的课程我基本上没学过，什么《材料力学》《数理方程》，我只是听说过，所以在课程归属这一点上我没什么同感。 之后我们看了《动物世界》，这是由腾讯影业出品的一部电影，名字起得不太好，不过看内容的话还不错。 晚饭，用我的三脚猫厨艺应付了一下小宇。这是一顿吃了很久的饭，可能是因为很久没见，我们聊了很多话题。小宇说了一些英国访学时的事情，以及之后计划去日本访学。并提到国内单程飞往日本需要4000元，而先坐车去香港，从香港飞往日本再飞回来也只是2000元。 大概晚上8点半，小宇准备回家，奈何在公交车站一直等车到10点15分都没有车，于是就计划明天早上再回去。 我们晚上又看了《勇敢者游戏2》这部电影，顺便给小宇科普了一些计算机网络的知识，然后就睡觉了。 第二天早上小宇回家。我们本质上都是很普通的人，希望每天开开心心。那么，期待我们的下一次相见。","link":"/2020/06/07/%E5%BA%9A%E5%AD%907-%E6%97%A7%E5%8F%8B%E9%87%8D%E9%80%A2/"},{"title":"庚子#8 | 端午将至","text":"仍记起去年，在课程压力比较大的大二下学期，端午节是和光年一起过的。时间过得真是快，转眼又到了今年的端午。 端午节总是在一年的中间，小时候过端午没有太多的感触，但随着年岁的增长，我越来越意识到端午正是总结上半年的生活的恰当时机。 今年上半年都宅家学习了，值得庆幸的是这学期的课比之前的学期真的少了很多。每次想起以前那么多课，我的心好痛。 上半年主要脉络我只记得个大概了： 5月前和家里人住在一起，天天宅在家里。我和 wuli 于2月29日成为研友，这件事情在我的预料之外，我感到非常幸运。 5月5日开始独居，继续宅在家里。 6月7日见了小宇。同一天，laoer 说她不打算考研了，打算出国。现在她在学德语。 6月10日和几个初中同学吃宵夜。 上半年其实过得挺普通的，不过我很喜欢这样平平淡淡的生活。 预计明天回去见家里人。待过了父亲节和端午节就继续独居。","link":"/2020/06/19/%E5%BA%9A%E5%AD%908-%E7%AB%AF%E5%8D%88%E5%B0%86%E8%87%B3/"},{"title":"初探C++多线程和锁机制","text":"C++11开始支持多线程编程，并在之后的版本中不断完善。 Hello World单线程写法：12345#include &lt;iostream&gt;int main(){ std::cout &lt;&lt; &quot;Hello World\\n&quot;;} Hello World多线程写法：1234567891011#include &lt;iostream&gt;#include &lt;thread&gt; // 1void hello() // 2{ std::cout &lt;&lt; &quot;Hello Concurrent World\\n&quot;;}int main(){ std::thread t(hello); // 3 t.join(); // 4} 量产线程的写法：1234567891011121314151617#include &lt;iostream&gt;#include &lt;thread&gt;void do_work(unsigned id){ std::cout &lt;&lt; i &lt;&lt; std::endl;}void f(){ std::vector&lt;std::thread&gt; threads; for (unsigned i = 0; i &lt; 20; ++i) { threads.emplace_back(do_work, i); // 产生线程 } for (auto &amp;entry : threads) // 对每个线程调用 join() entry.join();} 使用 std::lock_guard 保护共享数据：C++中通过实例化std::mutex创建互斥量实例，通过成员函数 lock() 对互斥量上锁，unlock() 进行解锁。不过，实践中不推荐直接去调用成员函数，调用成员函数就意味着，必须在每个函数出口都要去调用 unlock()，也包括异常的情况。C++标准库为互斥量提供了一个RAII语法的模板类std::lock_guard，在构造时就能提供已锁的互斥量，并在析构的时候进行解锁，从而保证了一个已锁互斥量能被正确解锁。 代码来源于 std::lock_guard 123456789101112131415161718192021222324252627282930#include &lt;thread&gt;#include &lt;mutex&gt;#include &lt;iostream&gt;int g_i = 0;std::mutex g_i_mutex; // 保护 g_ivoid safe_increment(){ std::lock_guard&lt;std::mutex&gt; lock(g_i_mutex); ++g_i; std::cout &lt;&lt; std::this_thread::get_id() &lt;&lt; &quot;: &quot; &lt;&lt; g_i &lt;&lt; '\\n'; // g_i_mutex 在锁离开作用域时自动释放}int main(){ std::cout &lt;&lt; &quot;main: &quot; &lt;&lt; g_i &lt;&lt; '\\n'; std::thread t1(safe_increment); std::thread t2(safe_increment); t1.join(); t2.join(); std::cout &lt;&lt; &quot;main: &quot; &lt;&lt; g_i &lt;&lt; '\\n';} 使用 std::shared_timed_mutex 避免数据竞争shared_timed_mutex 类是能用于保护数据免受多个线程同时访问的同步原语。与其他促进排他性访问的互斥类型相反，拥有二个层次的访问： 共享 - 多个线程能共享同一互斥的所有权。 排他性 - 仅一个线程能占有互斥。 共享互斥通常用于多个读线程能同时访问同一资源而不导致数据竞争，但只有一个写线程能访问的情形。 代码来源于std::shared_timed_mutex 123456789101112131415161718192021222324#include &lt;mutex&gt;#include &lt;shared_mutex&gt;class R{ mutable std::shared_timed_mutex mut; /* 数据 */public: R &amp;operator=(const R &amp;other) { // 要求排他性所有权以写入 *this std::unique_lock&lt;std::shared_timed_mutex&gt; lhs(mut, std::defer_lock); // 要求共享所有权以读取 other std::shared_lock&lt;std::shared_timed_mutex&gt; rhs(other.mut, std::defer_lock); std::lock(lhs, rhs); /* 赋值数据 */ return *this; }};int main(){ R r;} 使用 std::scoped_lock 避免死锁线程有对锁的竞争：一对线程需要对他们所有的互斥量做一些操作，其中每个线程都有一个互斥量，且等待另一个解锁。这样没有线程能工作，因为他们都在等待对方释放互斥量。这种情况就是死锁，它的最大问题就是由两个或两个以上的互斥量来锁定一个操作。 C++标准库有办法解决这个问题，std::scoped_lock——可以一次性锁住多个(两个以上)的互斥量，并且没有副作用(死锁风险)，而且是RAII风格喵~。 以下示例用 std::scoped_lock 锁定互斥对而不死锁，且为 RAII 风格。 代码来源于std::scoped_lock 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include &lt;mutex&gt;#include &lt;thread&gt;#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;functional&gt;#include &lt;chrono&gt;#include &lt;string&gt;struct Employee{ Employee(std::string id) : id(id) {} std::string id; std::vector&lt;std::string&gt; lunch_partners; std::mutex m; std::string output() const { std::string ret = &quot;Employee &quot; + id + &quot; has lunch partners: &quot;; for (const auto &amp;partner : lunch_partners) ret += partner + &quot; &quot;; return ret; }};void send_mail(Employee &amp;, Employee &amp;){ // 模拟耗时的发信操作 std::this_thread::sleep_for(std::chrono::seconds(1));}void assign_lunch_partner(Employee &amp;e1, Employee &amp;e2){ static std::mutex io_mutex; { std::lock_guard&lt;std::mutex&gt; lk(io_mutex); std::cout &lt;&lt; e1.id &lt;&lt; &quot; and &quot; &lt;&lt; e2.id &lt;&lt; &quot; are waiting for locks&quot; &lt;&lt; std::endl; } { // 用 std::scoped_lock 取得二个锁，而无需担心 // 其他对 assign_lunch_partner 的调用死锁我们 // 而且它亦提供便利的 RAII 风格机制 std::scoped_lock lock(e1.m, e2.m); // 等价代码 1 （用 std::lock 和 std::lock_guard ） // std::lock(e1.m, e2.m); // std::lock_guard&lt;std::mutex&gt; lk1(e1.m, std::adopt_lock); // std::lock_guard&lt;std::mutex&gt; lk2(e2.m, std::adopt_lock); // 等价代码 2 （若需要 unique_lock ，例如对于条件变量） // std::unique_lock&lt;std::mutex&gt; lk1(e1.m, std::defer_lock); // std::unique_lock&lt;std::mutex&gt; lk2(e2.m, std::defer_lock); // std::lock(lk1, lk2); { std::lock_guard&lt;std::mutex&gt; lk(io_mutex); std::cout &lt;&lt; e1.id &lt;&lt; &quot; and &quot; &lt;&lt; e2.id &lt;&lt; &quot; got locks&quot; &lt;&lt; std::endl; } e1.lunch_partners.push_back(e2.id); e2.lunch_partners.push_back(e1.id); } send_mail(e1, e2); send_mail(e2, e1);}int main(){ Employee alice(&quot;alice&quot;), bob(&quot;bob&quot;), christina(&quot;christina&quot;), dave(&quot;dave&quot;); // 在并行线程中指派，因为就午餐指派发邮件消耗很长时间 std::vector&lt;std::thread&gt; threads; threads.emplace_back(assign_lunch_partner, std::ref(alice), std::ref(bob)); threads.emplace_back(assign_lunch_partner, std::ref(christina), std::ref(bob)); threads.emplace_back(assign_lunch_partner, std::ref(christina), std::ref(alice)); threads.emplace_back(assign_lunch_partner, std::ref(dave), std::ref(bob)); for (auto &amp;thread : threads) thread.join(); std::cout &lt;&lt; alice.output() &lt;&lt; '\\n' &lt;&lt; bob.output() &lt;&lt; '\\n' &lt;&lt; christina.output() &lt;&lt; '\\n' &lt;&lt; dave.output() &lt;&lt; '\\n';} 使用更为灵活的std::unique_lockstd::unqiue_lock 使用更为自由的不变量，这样 std::unique_lock 实例不会总与互斥量的数据类型 相关，使用起来要比 std:lock_guard 更加灵活。首先，可将 std::adopt_lock 作为第二个参数传入 构造函数，对互斥量进行管理；也可以将 std::defer_lock 作为第二个参数传递进去，表明互斥量应 保持解锁状态。这样，就可以被 std::unique_lock 对象(不是互斥量)的 lock() 函数所获取，或传递 std::unique_lock 对象到 std::lock() 中。 当你想要锁定互斥锁时，可以创建类型为 std::unique_lock的局部变量，并将该互斥锁作为参数传递。 构造unique_lock时，它将锁定互斥锁，并且销毁该互斥锁后，它将解锁该互斥锁。 更重要的是：如果引发异常，则将调用 std::unique_lock 析构函数，因此互斥量将被解锁。 示例 1 代码来源于Stack Overflow 123456789101112// 示例 1#include &lt;mutex&gt;int some_shared_var = 0;int func(){ int a = 3; { // Critical section std::unique_lock&lt;std::mutex&gt; lock(my_mutex); some_shared_var += a; } // End of critical section} 示例 2 代码来源于std::unique_lock 123456789101112131415161718192021222324252627282930313233343536373839// 示例 2#include &lt;mutex&gt;#include &lt;thread&gt;#include &lt;chrono&gt;struct Box{ explicit Box(int num) : num_things{num} {} int num_things; std::mutex m;};void transfer(Box &amp;from, Box &amp;to, int num){ // 仍未实际取锁 std::unique_lock&lt;std::mutex&gt; lock1(from.m, std::defer_lock); std::unique_lock&lt;std::mutex&gt; lock2(to.m, std::defer_lock); // 锁两个 unique_lock 而不死锁 std::lock(lock1, lock2); from.num_things -= num; to.num_things += num; // 'from.m' 与 'to.m' 互斥解锁于 'unique_lock' 析构函数}int main(){ Box acc1(100); Box acc2(50); std::thread t1(transfer, std::ref(acc1), std::ref(acc2), 10); std::thread t2(transfer, std::ref(acc2), std::ref(acc1), 5); t1.join(); t2.join();} 小结我们现在会用C++写多线程代码啦，但是如何避免死锁，何种情况该用std::lock_guard 、std::shared_timed_mutex、std::scoped_lock、std::unique_lock，仍需要多加练习噢。","link":"/2019/11/06/%E5%88%9D%E6%8E%A2c%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81%E6%9C%BA%E5%88%B6/"},{"title":"樱花雨の仰望","text":"樱花雨对某些大城市的生活条件、经济结构做了一些调查，于是对各大城市形成了以下印象。 香港(Hong Kong)： 香港人的经济收入主要依靠贸易、金融、工商业、旅游业。由于香港人比较浮躁，急于获得收入，在此地很难培育出高科技公司。与此同时，由于香港的融资政策支持同股不同权，非常适合科技公司的发展，所以内地的科技公司比较喜欢去香港上市。香港高校的教师都是全球聘请的，而且薪资很高。 因为香港经济结构缺少底层基础（比如农业、工业），所以我对当地长期的经济发展并不看好。但是，由于政策原因和历史原因，香港在短时间内将仍然是国际大都市。（香港的政策对融资和贸易很友好。） 如果你打算从事会计、金融、旅游、司法等类型的工作，或者你拥有博士学位，可以考虑来港就业。 IT从业人员就不要考虑来香港就业了，香港的软件大部分都外包出去了。IT人员在港的经济收入不比内地高，而同等收入的情况下内地生活条件高很多。 深圳： 深圳城的平均年龄低，坐公交、坐地铁、在街上走，将会遇到很多小姐姐/小哥哥。深圳外地人比较多，来了就是深圳人，基本不可能受到当地人的排挤，每逢春节深圳就变成一座空城。深圳非常重视人才，在政策上有多项吸引人才的计划，比如孔雀计划。深圳的产业政策对科技公司比较友好，腾讯总部、百度总部、迅雷总部、华大基因都在此落户，也不乏正在成长的中小企业。香港的大部分软件外包都扔给了深圳。据了解，2018年深圳的GDP超过了香港。 我个人认为，在中国，深圳是对IT从业人员最友好的城市。 广州： 腾讯广研部、超级课程表、唯品会、网易在广州。广州的物价不比广东的其他城市贵，只是房价贵。本地人喜欢讲粤语，不过普通话也相当常用。外国人来中国采购货物，比较喜欢来广州，因为广州的商品种类比较全面，可以一次性买到合适的货物。广交会在对外贸易方面有巨大影响力。 广州也是一个对IT从业人员比较友好的城市，是就业的好地方。 东莞： 华为多部门从深圳搬来这里，将会带动一系列的发展。在东莞，相关的利益集团可能会因为华为的到来而业务量大增。东莞与深圳交界，企业之间有一定的交流。 珠海： 博主曾去过珠海两次，珠海的风土人情挺好的，环境优美，居住体验会很好。珠海的IT氛围不及广深，不过也有一些IT企业在此，比如金山、时代互联、魅族、云游科技（李兰云）、心游科技（创新工场、金山投资），此城的IT水平比全国也高很多。珠海的经济水平可以，房价略低于广深，是个居住的好地方。 东京(とうきょう)： 日本比较繁华的地方。满街快步的行人，表达着它快节奏的生活理念。比起日本其他地方，这里的景色并不是那么突出，（如果忽略高昂的物价的话）这里绝对是一个玩乐和购物必去的地方。 东京的住宅水平较好，高级的有格调的建筑比较多。需要程序员的企业一抓一大把， 这里还有谷歌日本、微软日本、Facebook日本、亚马逊日本、IBM日本。 大阪(おおさか)： 位于东京横滨500公里之外，日本的传统的、现代的文化都可以感受。 作为中国人来说的话，东京是个过于讲究的城市，大家坐电车也不说话，走路时也和规矩，走路速度也快，整体氛围没有那么放松。但是大阪这个城市就很接地气儿！大家穿的衣服也比东京鲜艳，性格开朗，不是说在公共场合大吵大闹OK，但是高高兴兴的一边走一边说笑，电车上和朋友稍微出声说说话还是不会招白眼的。 横滨(よこはま)： GDP居日本第三。和东京几乎同处同一个地区，很多人会在横滨居住东京上班。这里的物价比东京便宜啊。 名古屋(なごや)： 位于东京和大阪的正中偏大阪的位置，是中部地区的最大城市，也是中部都市圈的中心。 旧金山(San Francisco)及其毗邻区域： 作为宇宙中心的硅谷，科技巨头数量世界第一。微软、谷歌、Oracle、Intel、Yahoo、Twitter、Facebook、LinkedIn、EBay 、Mozilla、 Symantec Corporation、Netflix 、Wikipedia维基媒体基金会，巴拉巴拉小魔仙 西雅图(Seattle)： 在旧金山以北1300公里，IT阵形和（硅谷）湾区有一拼。 多伦多(Toronto)： 略略略。 重要的不是你在哪儿 而是你在那里做什么","link":"/2019/05/01/%E6%A8%B1%E8%8A%B1%E9%9B%A8%E3%81%AE%E4%BB%B0%E6%9C%9B/"}],"tags":[],"categories":[{"name":"你发现了一条咸鱼","slug":"你发现了一条咸鱼","link":"/categories/%E4%BD%A0%E5%8F%91%E7%8E%B0%E4%BA%86%E4%B8%80%E6%9D%A1%E5%92%B8%E9%B1%BC/"},{"name":"日常","slug":"日常","link":"/categories/%E6%97%A5%E5%B8%B8/"},{"name":"杂萃","slug":"杂萃","link":"/categories/%E6%9D%82%E8%90%83/"}]}